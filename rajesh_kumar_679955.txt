#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#define SIZE 20
#define HASHTABLESIZE 10
#define NUMSLOTS       2
#define ENDOFINPUT    -1
#define OVERFLOW      -2
#define HASHTABLEFULL -3
#define MIDSQRMASK 0x000001C0;

struct credit_card
{
        char name[25];
        int id;
        char address[50];
        char dob[12];
        char email_id[50];
        long long int card_no;
        char expire_date[6];
        char issue_date[6];
        char cvv[4];
        struct credit_card *l;
        struct credit_card *r;
};
struct credit_card *root,*temptr,*newptr,*prev,*store;
struct credit_card hashtable[HASHTABLESIZE][NUMSLOTS];
insert()
{
        newptr=malloc(sizeof(struct credit_card));
        printf("Enter the name:\n");
        scanf("%s",&newptr->name);
        printf("Enter the id:\n");
        scanf("%d",&newptr->id);
        printf("Enter the address:\n");
        scanf("%s",&newptr->address);
        printf("Enter the date of birth:\n");
        scanf("%s",&newptr->dob);
        printf("Enter the email id:\n");
        scanf("%s",&newptr->email_id);
        printf("Enter the card no:\n");
        scanf("%lld",&newptr->card_no);
        printf("Enter the issue date:\n");
        scanf("%s",&newptr->issue_date);
        printf("Enter the expire_date:\n");
        scanf("%s",&newptr->expire_date);
        printf("Enter the cvv:\n");
        scanf("%s",&newptr->cvv);
        newptr->l=NULL;
        newptr->r=NULL;
        if(root==NULL)
        {
                root=newptr;
        }
        else
        {
                temptr=root;

                while(temptr!=NULL)
                {
                        if(newptr<temptr)
                        {
                                prev=temptr;
                                temptr=temptr->l;
                        }
                        else
                        {
                                prev=temptr;
                                temptr=temptr->r;
                        }
                        if(newptr<prev)
                        {
                                prev->l=newptr;
                        }
                        else
                        {
                                prev->r=newptr;
                        }
                }
        }
}

print(struct credit_card *p)
{
        if(p->l)
                print(p->l);
        printf("%s\n%ld\n",p->name,p->card_no);
        if(p->r)
                print(p->r);
}
/*hashtable()
  {
  store=malloc(sizeof(struct credit_card));
  int ind=hs(card_no);
  while(hash[ind]!=NULL && hash[ind]->card_no!=-1)
  {
  ++ind%=SIZE;
  }
  hash[ind]=store->card_no;
  }*/
void display32bits( unsigned int num)
{
        unsigned int i,mask=0x80000000;

        printf("%#010x---%d---", num,num);
        for ( i =0;i<32;i++)
        {
                printf("%d", (mask&num)>0);
                mask >>=1;
                if  ( (i+1)  % 4 == 0 )  printf(" ");
        }
        printf("\n");
}

int middle_sqr( int key)
{
        unsigned char LSB = key;
        unsigned int temp =  LSB * LSB & MIDSQRMASK;
        return ( temp >> 6);
}

void display()
{
        printf("Id:%d\t\t%s\t\t",store->card_no, store->name);
}

hashinsert()
{
        int fp1;
        int buf[sizeof(struct credit_card)];
        store=malloc(sizeof(struct credit_card));
        fp1=open("card.txt",O_RDWR,S_IRWXU);
        //While(read(fd,buf,sizeof(struct credit_card))

        int index = middle_sqr( store->card_no) ;
        display();
        printf("\t\t index = %d \n", index );
        display32bits( store->card_no);
        printf("\n");

        if ( hashtable[index][0].id == 0 )
                hashtable[index][0] = store->card_no;
        else
                if ( hashtable[index][1].card_no == 0 )
                        hashtable[index][1] = store->card->no;
                else
                {
                        printf("Over flow for id = %d\nThe following records present:\n", store->card_no);
                        display(hashtable[index][0]);
                        printf("\n");
                        display(hashtable[index][1]);

                        int i;

                        i  = ( index +1) % HASHTABLESIZE ;
                        while( i != index )
                        {
                                if ( hashtable[i][0].card_no == 0 )
                                {
                                        hashtable[i][0] = store->card_no;
                                        printf("\nInserted in Index %d\n\n", i);
                                        return store->card_no;
                                }
                                if ( hashtable[i][1].id == 0 )
                                {
                                        hashtable[i][1] = struct credit_card;
                                        printf("\nInserted in Index %d\n\n", i);
                                        return store->credit_no;
                                }
                                i = ++i %HASHTABLESIZE;
                        }

                        return   HASHTABLEFULL;
                }

        return store->card_no;

}
void displayhash(void)
{

        int i;

        for ( i=0;i<HASHTABLESIZE;i++)
        {
                printf("\n");
                printf("HASH[%d]:\t\t",i);

                if( hashtable[i][0].card_no!= 0)
                {       display(hashtable[i][0]);

                }
                if( hashtable[i][1].card_no!= 0)
                {
                        printf("\n\t\t\t");
                        display(hashtable[i][1]);
                }
        }
        printf("\n");

}

main()
{
        int i,n,x,fp;
        char buf[sizeof(struct credit_card)];
        printf("Enter your choice:");
        scanf("%d",&ch);
        while(1)
        {
                switch(ch)
                {
                        case 1:
                                printf("ENter value");
                                scanf("%d",&n);
                                fp=open("card.txt",O_APPEND|O_RDWR,S_IRWXU);
                                for(i=0;i<n;i++)
                                {
                                        insert();
                                }
                                print(root);
                                write(fp,newptr,sizeof(struct credit_card));
                                printf("size of struct %d\n",sizeof(struct credit_card));
                                break;
                        case 2:
                                displayhash();
                                break;
	         default:
		  printf(“Enter valid option”);
		  break;    }
